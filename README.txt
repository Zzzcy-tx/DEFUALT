/*
 * README.txt
 *
 *  Created on: 2022年7月12日
 *      Author: FeiDao
 */
 
 
//-------------------------------------------------------------------------------------------------------------------
	note:	适用于MSP430F5529LP
			用例程法如下


//-------------------------------------------------------------------------------------------------------------------

	P1DIR |= BIT0;					//设置1_0引脚为输出
	P1OUT &= ~BIT0;					//1_0引脚输出低电平
	P1OUT |= BIT0;   				//1_0引脚输出高电平
	P1OUT ^|= BIT0;   				//1_0引脚翻转
	
	P6DIR &= ~(BIT0+BIT1+BIT2);		//设置6_0，6_1，6_2引脚为输出
	P6OUT |= (BIT0+BIT1+BIT2);		//设置6_0，6_1，6_2引脚输出高电平
	P6REN |= (BIT0+BIT1+BIT2);		//设置6_0，6_1，6_2引脚读取电平状态
	if(((P6IN & BIT1)==0)&&((P6IN & BIT2)==0)&&((P6IN & BIT0)==0));				//判断电平状态
	
	
//-------------------------------------------------------------------------------------------------------------------	
	int encoder_count2_4 = 0;		//2_4引脚编码器计数
	int encoder_count1_2 = 0;		//1_2引脚编码器计数
	int speed_1 = 0;				//2_4引脚编码器实时读数
	int speed_2 = 0;				//2_4引脚编码器实时读数
	
	int Data_USCI_A0;				//USCI_A0接收内容原始
	int Data_USCI_A1;				//USCI_A1接收内容原始
	int Data_USCI_A0_int;			//USCI_A0接收内容int形式
	int Data_USCI_A1_int;			//USCI_A1接收内容int形式
	char Data_USCI_A0_char;			//USCI_A0接收内容char形式
	char Data_USCI_A1_char;			//USCI_A1接收内容char形式


//-------------------------------------------------------------------------------------------------------------------
	gyroscope_init();					//陀螺仪开启
	read_gyroscope();				//陀螺仪读数
	encoder_init();					//编码器初始化
	encoder_read();					//编码器读数
	
	pwm_init(12, 100, 0);			//1_2引脚PWM初始化，100Hz，占空比0%
	pwm_init(13, 100, 0);			//1_3引脚PWM初始化，100Hz，占空比0%
	pwm_init(14, 100, 0);			//1_4引脚PWM初始化，100Hz，占空比0%
	pwm_init(15, 100, 0);			//1_5引脚PWM初始化，100Hz，占空比0%
	pwm_init(20, 100, 0);			//2_0引脚PWM初始化，100Hz，占空比0%
	pwm_init(24, 100, 0);			//2_4引脚PWM初始化，100Hz，占空比0%
	pwm_init(25, 100, 0);			//2_5引脚PWM初始化，100Hz，占空比0%
	
	pwm_duty(12, 10);				//1_2引脚PWM输出，占空比10%
	pwm_duty(13, 20);				//1_3引脚PWM输出，占空比20%
	pwm_duty(14, 30);				//1_4引脚PWM输出，占空比30%
	pwm_duty(15, 40);				//1_5引脚PWM输出，占空比40%
	pwm_duty(20, 50);				//2_0引脚PWM输出，占空比50%
	pwm_duty(24, 60);				//2_4引脚PWM输出，占空比60%
	pwm_duty(25, 70);				//2_5引脚PWM输出，占空比70%
	
	timer_init("TA0", 100);			//TA0定时器中断开启，100ms
	timer_init("TA1", 100);			//TA1定时器中断开启，100ms
	timer_init("TA2", 100);			//TA2定时器中断开启，100ms
	timer_init("TB0", 50);			//TB0定时器中断开启，100ms
	
	uart_init("A0");				//USCI_A0串口中断开启
	uart_sent("A0", '1');			//USCI_A0串口发送'1'
	uart_init("A1");				//USCI_A1串口中断开启
	uart_sent("A1", '1');			//USCI_A1串口发送'1'

 
 
 